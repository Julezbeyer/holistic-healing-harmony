[plugin:vite:react-swc] × the name `createClient` is defined multiple times
    ╭─[/home/runner/workspace/src/integrations/supabase/client.ts:2:1]
  1 │ // This file is automatically generated. Do not edit it directly.
  2 │ import { createClient } from '@supabase/supabase-js';
    ·          ──────┬─────
    ·                ╰── previous definition of `createClient` here
  3 │ import type { Database } from './types';
  4 │ 
  5 │ const SUPABASE_URL = "https://lhmicelinsyzjhjiznqn.supabase.co";
  6 │ const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxobWljZWxpbnN5empoaml6bnFuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA4NzAwMTcsImV4cCI6MjA1NjQ0NjAxN30.PA_0ILn7L0cCxjk6UbzKhZpysNxJcdN8N_7OkeGMDP0";
  7 │ 
  8 │ // Import the supabase client like this:
  9 │ // import { supabase } from "@/integrations/supabase/client";
 10 │ 
 11 │ // Direkten Client erstellen
 12 │ export const supabase = createClient<Database>(
 13 │   SUPABASE_URL,
 14 │   SUPABASE_PUBLISHABLE_KEY,
 15 │   {
 16 │     auth: {
 17 │       persistSession: true,
 18 │       autoRefreshToken: true,
 19 │     },
 20 │     global: {
 21 │       headers: {
 22 │         'X-Client-Info': 'supabase-js-react',
 23 │       },
 24 │     },
 25 │   }
 26 │ );
 27 │ 
 28 │ // Alternativer Client mit Proxy, falls der direkte Zugriff fehlschlägt
 29 │ export const createProxiedClient = () => {
 30 │   // Bestimme, ob wir in einer Replit-Umgebung sind
 31 │   const isReplit = window.location.hostname.includes('replit');
 32 │   
 33 │   // Falls wir in Replit sind, nutze den Proxy für Anfragen
 34 │   if (isReplit) {
 35 │     const proxyUrl = window.location.origin + '/supabase-proxy';
 36 │     return createClient<Database>(
 37 │       proxyUrl,
 38 │       SUPABASE_PUBLISHABLE_KEY,
 39 │       {
 40 │         auth: {
 41 │           persistSession: true,
 42 │           autoRefreshToken: true,
 43 │         },
 44 │         global: {
 45 │           headers: {
 46 │             'X-Client-Info': 'supabase-js-react-proxied',
 47 │           },
 48 │         },
 49 │       }
 50 │     );
 51 │   }
 52 │   
 53 │   // Sonst den regulären Client zurückgeben
 54 │   return supabase;
 55 │ };
 56 │ import { createClient } from '@supabase/supabase-js';
    ·          ──────┬─────
    ·                ╰── `createClient` redefined here
 57 │ 
 58 │ // Umgebungsvariablen für die Supabase-Verbindung
 59 │ // In einer echten Anwendung würden diese als Env-Variablen gesetzt
    ╰────
  × the name `SUPABASE_URL` is defined multiple times
    ╭─[/home/runner/workspace/src/integrations/supabase/client.ts:5:1]
  2 │ import { createClient } from '@supabase/supabase-js';
  3 │ import type { Database } from './types';
  4 │ 
  5 │ const SUPABASE_URL = "https://lhmicelinsyzjhjiznqn.supabase.co";
    ·       ──────┬─────
    ·             ╰── previous definition of `SUPABASE_URL` here
  6 │ const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxobWljZWxpbnN5empoaml6bnFuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA4NzAwMTcsImV4cCI6MjA1NjQ0NjAxN30.PA_0ILn7L0cCxjk6UbzKhZpysNxJcdN8N_7OkeGMDP0";
  7 │ 
  8 │ // Import the supabase client like this:
  9 │ // import { supabase } from "@/integrations/supabase/client";
 10 │ 
 11 │ // Direkten Client erstellen
 12 │ export const supabase = createClient<Database>(
 13 │   SUPABASE_URL,
 14 │   SUPABASE_PUBLISHABLE_KEY,
 15 │   {
 16 │     auth: {
 17 │       persistSession: true,
 18 │       autoRefreshToken: true,
 19 │     },
 20 │     global: {
 21 │       headers: {
 22 │         'X-Client-Info': 'supabase-js-react',
 23 │       },
 24 │     },
 25 │   }
 26 │ );
 27 │ 
 28 │ // Alternativer Client mit Proxy, falls der direkte Zugriff fehlschlägt
 29 │ export const createProxiedClient = () => {
 30 │   // Bestimme, ob wir in einer Replit-Umgebung sind
 31 │   const isReplit = window.location.hostname.includes('replit');
 32 │   
 33 │   // Falls wir in Replit sind, nutze den Proxy für Anfragen
 34 │   if (isReplit) {
 35 │     const proxyUrl = window.location.origin + '/supabase-proxy';
 36 │     return createClient<Database>(
 37 │       proxyUrl,
 38 │       SUPABASE_PUBLISHABLE_KEY,
 39 │       {
 40 │         auth: {
 41 │           persistSession: true,
 42 │           autoRefreshToken: true,
 43 │         },
 44 │         global: {
 45 │           headers: {
 46 │             'X-Client-Info': 'supabase-js-react-proxied',
 47 │           },
 48 │         },
 49 │       }
 50 │     );
 51 │   }
 52 │   
 53 │   // Sonst den regulären Client zurückgeben
 54 │   return supabase;
 55 │ };
 56 │ import { createClient } from '@supabase/supabase-js';
 57 │ 
 58 │ // Umgebungsvariablen für die Supabase-Verbindung
 59 │ // In einer echten Anwendung würden diese als Env-Variablen gesetzt
 60 │ const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || '';
    ·       ──────┬─────
    ·             ╰── `SUPABASE_URL` redefined here
 61 │ const SUPABASE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || '';
 62 │ 
 63 │ // Erstelle den Supabase-Client
    ╰────
  × the name `supabase` is defined multiple times
    ╭─[/home/runner/workspace/src/integrations/supabase/client.ts:12:1]
  9 │ // import { supabase } from "@/integrations/supabase/client";
 10 │ 
 11 │ // Direkten Client erstellen
 12 │ export const supabase = createClient<Database>(
    ·              ────┬───
    ·                  ╰── previous definition of `supabase` here
 13 │   SUPABASE_URL,
 14 │   SUPABASE_PUBLISHABLE_KEY,
 15 │   {
 16 │     auth: {
 17 │       persistSession: true,
 18 │       autoRefreshToken: true,
 19 │     },
 20 │     global: {
 21 │       headers: {
 22 │         'X-Client-Info': 'supabase-js-react',
 23 │       },
 24 │     },
 25 │   }
 26 │ );
 27 │ 
 28 │ // Alternativer Client mit Proxy, falls der direkte Zugriff fehlschlägt
 29 │ export const createProxiedClient = () => {
 30 │   // Bestimme, ob wir in einer Replit-Umgebung sind
 31 │   const isReplit = window.location.hostname.includes('replit');
 32 │   
 33 │   // Falls wir in Replit sind, nutze den Proxy für Anfragen
 34 │   if (isReplit) {
 35 │     const proxyUrl = window.location.origin + '/supabase-proxy';
 36 │     return createClient<Database>(
 37 │       proxyUrl,
 38 │       SUPABASE_PUBLISHABLE_KEY,
 39 │       {
 40 │         auth: {
 41 │           persistSession: true,
 42 │           autoRefreshToken: true,
 43 │         },
 44 │         global: {
 45 │           headers: {
 46 │             'X-Client-Info': 'supabase-js-react-proxied',
 47 │           },
 48 │         },
 49 │       }
 50 │     );
 51 │   }
 52 │   
 53 │   // Sonst den regulären Client zurückgeben
 54 │   return supabase;
 55 │ };
 56 │ import { createClient } from '@supabase/supabase-js';
 57 │ 
 58 │ // Umgebungsvariablen für die Supabase-Verbindung
 59 │ // In einer echten Anwendung würden diese als Env-Variablen gesetzt
 60 │ const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || '';
 61 │ const SUPABASE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || '';
 62 │ 
 63 │ // Erstelle den Supabase-Client
 64 │ export const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);
    ·              ────┬───
    ·                  ╰── `supabase` redefined here
    ╰────
/home/runner/workspace/src/integrations/supabase/client.ts:2:1
11 |  // Direkten Client erstellen
12 |  export const supabase = createClient<Database>(
13 |    SUPABASE_URL,
   |         ^
14 |    SUPABASE_PUBLISHABLE_KEY,
15 |    {
Click outside, press Esc key, or fix the code to dismiss.
You can also disable this overlay by setting server.hmr.overlay to false in vite.config.ts.